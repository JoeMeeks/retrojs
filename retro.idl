interface Core {
  void init();
  void deinit();
  void set_environment(callback cb);
  void set_video_refresh(video_refresh_t cb);
  void set_audio_sample(audio_sample_t arg);
  void set_audio_sample_batch(audio_sample_batch_t cb);
  void set_input_poll(input_poll_t cb);
  void set_input_state(input_state_t cb);
  unsigned long long api_version();
  void get_system_info(system_info info);
  void get_system_av_info(system_av_info info);
  void set_controller_port_device(unsigned long device, unsigned long port);
  void reset();
  void run();
  unsigned long long serialize_size();
  bool serialize(unsigned long size);
  bool unserialize(unsigned long size);
  void cheat_reset();
  void cheat_set(char code, bool enabled, unsigned long index);
  bool load_game(game_info game);
  bool load_game_special(unsigned long num_info, game_info info, unsigned long game_type);
  void unload_game();
  unsigned long long get_region();
  void get_memory_data(unsigned long id);
  unsigned long long get_memory_size(unsigned long id);
};

interface Language {
  const long LANGUAGE_CHINESE_SIMPLIFIED = 11;
  const long LANGUAGE_CHINESE_TRADITIONAL = 10;
  const long LANGUAGE_KOREAN = 9;
  const long LANGUAGE_RUSSIAN = 8;
  const long LANGUAGE_PORTUGUESE = 7;
  const long LANGUAGE_DUTCH = 6;
  const long LANGUAGE_ITALIAN = 5;
  const long LANGUAGE_GERMAN = 4;
  const long LANGUAGE_SPANISH = 3;
  const long LANGUAGE_FRENCH = 2;
  const long LANGUAGE_JAPANESE = 1;
  const long LANGUAGE_ENGLISH = 0;
};

interface Key {
  const long K_UNDO = 322;
  const long K_EURO = 321;
  const long K_POWER = 320;
  const long K_MENU = 319;
  const long K_BREAK = 318;
  const long K_SYSREQ = 317;
  const long K_PRINT = 316;
  const long K_HELP = 315;
  const long K_COMPOSE = 314;
  const long K_MODE = 313;
  const long K_RSUPER = 312;
  const long K_LSUPER = 311;
  const long K_LMETA = 310;
  const long K_RMETA = 309;
  const long K_LALT = 308;
  const long K_RALT = 307;
  const long K_LCTRL = 306;
  const long K_RCTRL = 305;
  const long K_LSHIFT = 304;
  const long K_RSHIFT = 303;
  const long K_SCROLLOCK = 302;
  const long K_CAPSLOCK = 301;
  const long K_NUMLOCK = 300;
  const long K_F15 = 296;
  const long K_F14 = 295;
  const long K_F13 = 294;
  const long K_F12 = 293;
  const long K_F11 = 292;
  const long K_F10 = 291;
  const long K_F9 = 290;
  const long K_F8 = 289;
  const long K_F7 = 288;
  const long K_F6 = 287;
  const long K_F5 = 286;
  const long K_F4 = 285;
  const long K_F3 = 284;
  const long K_F2 = 283;
  const long K_F1 = 282;
  const long K_PAGEDOWN = 281;
  const long K_PAGEUP = 280;
  const long K_END = 279;
  const long K_HOME = 278;
  const long K_INSERT = 277;
  const long K_LEFT = 276;
  const long K_RIGHT = 275;
  const long K_DOWN = 274;
  const long K_UP = 273;
  const long K_KP_EQUALS = 272;
  const long K_KP_ENTER = 271;
  const long K_KP_PLUS = 270;
  const long K_KP_MINUS = 269;
  const long K_KP_MULTIPLY = 268;
  const long K_KP_DIVIDE = 267;
  const long K_KP_PERIOD = 266;
  const long K_KP9 = 265;
  const long K_KP8 = 264;
  const long K_KP7 = 263;
  const long K_KP6 = 262;
  const long K_KP5 = 261;
  const long K_KP4 = 260;
  const long K_KP3 = 259;
  const long K_KP2 = 258;
  const long K_KP1 = 257;
  const long K_KP0 = 256;
  const long K_DELETE = 127;
  const long K_z = 122;
  const long K_y = 121;
  const long K_x = 120;
  const long K_w = 119;
  const long K_v = 118;
  const long K_u = 117;
  const long K_t = 116;
  const long K_s = 115;
  const long K_r = 114;
  const long K_q = 113;
  const long K_p = 112;
  const long K_o = 111;
  const long K_n = 110;
  const long K_m = 109;
  const long K_l = 108;
  const long K_k = 107;
  const long K_j = 106;
  const long K_i = 105;
  const long K_h = 104;
  const long K_g = 103;
  const long K_f = 102;
  const long K_e = 101;
  const long K_d = 100;
  const long K_c = 99;
  const long K_b = 98;
  const long K_a = 97;
  const long K_BACKQUOTE = 96;
  const long K_UNDERSCORE = 95;
  const long K_CARET = 94;
  const long K_RIGHTBRACKET = 93;
  const long K_BACKSLASH = 92;
  const long K_LEFTBRACKET = 91;
  const long K_AT = 64;
  const long K_QUESTION = 63;
  const long K_GREATER = 62;
  const long K_EQUALS = 61;
  const long K_LESS = 60;
  const long K_SEMICOLON = 59;
  const long K_COLON = 58;
  const long K_9 = 57;
  const long K_8 = 56;
  const long K_7 = 55;
  const long K_6 = 54;
  const long K_5 = 53;
  const long K_4 = 52;
  const long K_3 = 51;
  const long K_2 = 50;
  const long K_1 = 49;
  const long K_0 = 48;
  const long K_SLASH = 47;
  const long K_PERIOD = 46;
  const long K_MINUS = 45;
  const long K_COMMA = 44;
  const long K_PLUS = 43;
  const long K_ASTERISK = 42;
  const long K_RIGHTPAREN = 41;
  const long K_LEFTPAREN = 40;
  const long K_QUOTE = 39;
  const long K_AMPERSAND = 38;
  const long K_DOLLAR = 36;
  const long K_HASH = 35;
  const long K_QUOTEDBL = 34;
  const long K_EXCLAIM = 33;
  const long K_SPACE = 32;
  const long K_ESCAPE = 27;
  const long K_PAUSE = 19;
  const long K_RETURN = 13;
  const long K_CLEAR = 12;
  const long K_TAB = 9;
  const long K_BACKSPACE = 8;
  const long K_UNKNOWN = 0;
  const long K_FIRST = 0;
};

interface mod {
  const long KMOD_SCROLLOCK = 64;
  const long KMOD_CAPSLOCK = 32;
  const long KMOD_NUMLOCK = 16;
  const long KMOD_META = 8;
  const long KMOD_ALT = 4;
  const long KMOD_CTRL = 2;
  const long KMOD_SHIFT = 1;
  const long KMOD_NONE = 0;
};

interface log_level {
  const long LOG_DEBUG = 0;
  const long LOG_INFO = 1;
  const long LOG_WARN = 2;
  const long LOG_ERROR = 3;
};

interface sensor_action {
  const long SENSOR_ACCELEROMETER_ENABLE = 0;
  const long SENSOR_ACCELEROMETER_DISABLE = 1;
};

interface camera_buffer {
  const long CAMERA_BUFFER_OPENGL_TEXTURE = 0;
  const long CAMERA_BUFFER_RAW_FRAMEBUFFER = 1;
};

interface rumble_effect {
  const long RUMBLE_STRONG = 0;
  const long RUMBLE_WEAK = 1;
};

interface hw_context_type {
  const long HW_CONTEXT_OPENGLES_VERSION = 5;
  const long HW_CONTEXT_OPENGLES3 = 4;
  const long HW_CONTEXT_OPENGL_CORE = 3;
  const long HW_CONTEXT_OPENGLES2 = 2;
  const long HW_CONTEXT_OPENGL = 1;
  const long HW_CONTEXT_NONE = 0;
};

interface pixel_format {
  const long PIXEL_FORMAT_0RGB1555 = 0;
  const long PIXEL_FORMAT_XRGB8888 = 1;
  const long PIXEL_FORMAT_RGB565 = 2;
};

callback environment_t = bool (unsigned long cmd);
callback video_refresh_t = void (Uint8Array data, unsigned long width, unsigned long  height, unsigned long pitch);
callback audio_sample_t = void (unsigned long left, unsigned long right);
callback audio_sample_batch_t = unsigned long (Int16Array data, unsigned long frames);
callback input_poll_t = void ();
callback input_state_t = long (unsigned long port, unsigned long device, unsigned long index, unsigned long id);

typedef long int64_t;
typedef unsigned long uint64_t;
typedef uint64_t perf_tick_t;
typedef int64_t time_t;
