interface Core {
  void init();
  void deinit();
  void set_environment(callback cb);
  void set_video_refresh(video_refresh_t cb);
  void set_audio_sample(audio_sample_t arg);
  void set_audio_sample_batch(audio_sample_batch_t cb);
  void set_input_poll(input_poll_t cb);
  void set_input_state(input_state_t cb);
  unsigned long long api_version();
  void get_system_info(system_info info);
  void get_system_av_info(system_av_info info);
  void set_controller_port_device(unsigned long device, unsigned long port);
  void reset();
  void run();
  unsigned long long serialize_size();
  bool serialize(unsigned long size);
  bool unserialize(unsigned long size);
  void cheat_reset();
  void cheat_set(char code, bool enabled, unsigned long index);
  bool load_game(game_info game);
  bool load_game_special(unsigned long num_info, game_info info, unsigned long game_type);
  void unload_game();
  unsigned long long get_region();
  void get_memory_data(unsigned long id);
  unsigned long long get_memory_size(unsigned long id);
};

interface Language {
  const long LANGUAGE_CHINESE_SIMPLIFIED = 11;
  const long LANGUAGE_CHINESE_TRADITIONAL = 10;
  const long LANGUAGE_KOREAN = 9;
  const long LANGUAGE_RUSSIAN = 8;
  const long LANGUAGE_PORTUGUESE = 7;
  const long LANGUAGE_DUTCH = 6;
  const long LANGUAGE_ITALIAN = 5;
  const long LANGUAGE_GERMAN = 4;
  const long LANGUAGE_SPANISH = 3;
  const long LANGUAGE_FRENCH = 2;
  const long LANGUAGE_JAPANESE = 1;
  const long LANGUAGE_ENGLISH = 0;
};

interface Key {
  const long K_UNDO = 322;
  const long K_EURO = 321;
  const long K_POWER = 320;
  const long K_MENU = 319;
  const long K_BREAK = 318;
  const long K_SYSREQ = 317;
  const long K_PRINT = 316;
  const long K_HELP = 315;
  const long K_COMPOSE = 314;
  const long K_MODE = 313;
  const long K_RSUPER = 312;
  const long K_LSUPER = 311;
  const long K_LMETA = 310;
  const long K_RMETA = 309;
  const long K_LALT = 308;
  const long K_RALT = 307;
  const long K_LCTRL = 306;
  const long K_RCTRL = 305;
  const long K_LSHIFT = 304;
  const long K_RSHIFT = 303;
  const long K_SCROLLOCK = 302;
  const long K_CAPSLOCK = 301;
  const long K_NUMLOCK = 300;
  const long K_F15 = 296;
  const long K_F14 = 295;
  const long K_F13 = 294;
  const long K_F12 = 293;
  const long K_F11 = 292;
  const long K_F10 = 291;
  const long K_F9 = 290;
  const long K_F8 = 289;
  const long K_F7 = 288;
  const long K_F6 = 287;
  const long K_F5 = 286;
  const long K_F4 = 285;
  const long K_F3 = 284;
  const long K_F2 = 283;
  const long K_F1 = 282;
  const long K_PAGEDOWN = 281;
  const long K_PAGEUP = 280;
  const long K_END = 279;
  const long K_HOME = 278;
  const long K_INSERT = 277;
  const long K_LEFT = 276;
  const long K_RIGHT = 275;
  const long K_DOWN = 274;
  const long K_UP = 273;
  const long K_KP_EQUALS = 272;
  const long K_KP_ENTER = 271;
  const long K_KP_PLUS = 270;
  const long K_KP_MINUS = 269;
  const long K_KP_MULTIPLY = 268;
  const long K_KP_DIVIDE = 267;
  const long K_KP_PERIOD = 266;
  const long K_KP9 = 265;
  const long K_KP8 = 264;
  const long K_KP7 = 263;
  const long K_KP6 = 262;
  const long K_KP5 = 261;
  const long K_KP4 = 260;
  const long K_KP3 = 259;
  const long K_KP2 = 258;
  const long K_KP1 = 257;
  const long K_KP0 = 256;
  const long K_DELETE = 127;
  const long K_z = 122;
  const long K_y = 121;
  const long K_x = 120;
  const long K_w = 119;
  const long K_v = 118;
  const long K_u = 117;
  const long K_t = 116;
  const long K_s = 115;
  const long K_r = 114;
  const long K_q = 113;
  const long K_p = 112;
  const long K_o = 111;
  const long K_n = 110;
  const long K_m = 109;
  const long K_l = 108;
  const long K_k = 107;
  const long K_j = 106;
  const long K_i = 105;
  const long K_h = 104;
  const long K_g = 103;
  const long K_f = 102;
  const long K_e = 101;
  const long K_d = 100;
  const long K_c = 99;
  const long K_b = 98;
  const long K_a = 97;
  const long K_BACKQUOTE = 96;
  const long K_UNDERSCORE = 95;
  const long K_CARET = 94;
  const long K_RIGHTBRACKET = 93;
  const long K_BACKSLASH = 92;
  const long K_LEFTBRACKET = 91;
  const long K_AT = 64;
  const long K_QUESTION = 63;
  const long K_GREATER = 62;
  const long K_EQUALS = 61;
  const long K_LESS = 60;
  const long K_SEMICOLON = 59;
  const long K_COLON = 58;
  const long K_9 = 57;
  const long K_8 = 56;
  const long K_7 = 55;
  const long K_6 = 54;
  const long K_5 = 53;
  const long K_4 = 52;
  const long K_3 = 51;
  const long K_2 = 50;
  const long K_1 = 49;
  const long K_0 = 48;
  const long K_SLASH = 47;
  const long K_PERIOD = 46;
  const long K_MINUS = 45;
  const long K_COMMA = 44;
  const long K_PLUS = 43;
  const long K_ASTERISK = 42;
  const long K_RIGHTPAREN = 41;
  const long K_LEFTPAREN = 40;
  const long K_QUOTE = 39;
  const long K_AMPERSAND = 38;
  const long K_DOLLAR = 36;
  const long K_HASH = 35;
  const long K_QUOTEDBL = 34;
  const long K_EXCLAIM = 33;
  const long K_SPACE = 32;
  const long K_ESCAPE = 27;
  const long K_PAUSE = 19;
  const long K_RETURN = 13;
  const long K_CLEAR = 12;
  const long K_TAB = 9;
  const long K_BACKSPACE = 8;
  const long K_UNKNOWN = 0;
  const long K_FIRST = 0;
};

interface mod {
  const long KMOD_SCROLLOCK = 64;
  const long KMOD_CAPSLOCK = 32;
  const long KMOD_NUMLOCK = 16;
  const long KMOD_META = 8;
  const long KMOD_ALT = 4;
  const long KMOD_CTRL = 2;
  const long KMOD_SHIFT = 1;
  const long KMOD_NONE = 0;
};

interface log_level {
  const long LOG_DEBUG = 0;
  const long LOG_INFO = 1;
  const long LOG_WARN = 2;
  const long LOG_ERROR = 3;
};

interface sensor_action {
  const long SENSOR_ACCELEROMETER_ENABLE = 0;
  const long SENSOR_ACCELEROMETER_DISABLE = 1;
};

interface camera_buffer {
  const long CAMERA_BUFFER_OPENGL_TEXTURE = 0;
  const long CAMERA_BUFFER_RAW_FRAMEBUFFER = 1;
};

interface rumble_effect {
  const long RUMBLE_STRONG = 0;
  const long RUMBLE_WEAK = 1;
};

interface hw_context_type {
  const long HW_CONTEXT_OPENGLES_VERSION = 5;
  const long HW_CONTEXT_OPENGLES3 = 4;
  const long HW_CONTEXT_OPENGL_CORE = 3;
  const long HW_CONTEXT_OPENGLES2 = 2;
  const long HW_CONTEXT_OPENGL = 1;
  const long HW_CONTEXT_NONE = 0;
};

interface pixel_format {
  const long PIXEL_FORMAT_0RGB1555 = 0;
  const long PIXEL_FORMAT_XRGB8888 = 1;
  const long PIXEL_FORMAT_RGB565 = 2;
};

callback environment_t = bool (unsigned long cmd);
callback video_refresh_t = void (Uint8Array data, unsigned long width, unsigned long  height, unsigned long pitch);
callback audio_sample_t = void (unsigned long left, unsigned long right);
callback audio_sample_batch_t = unsigned long (Int16Array data, unsigned long frames);
callback input_poll_t = void ();
callback input_state_t = long (unsigned long port, unsigned long device, unsigned long index, unsigned long id);

typedef long int64_t;
typedef unsigned long uint64_t;
typedef uint64_t perf_tick_t;
typedef int64_t time_t;

typedef unsigned long size_t;
typedef unsigned long uint16_t;
typedef short char;

callback proc_address_t = void ();
callback get_proc_address_t = void (DOMString sym);
callback log_printf_t = void (log_level level, DOMString fmt);
callback perf_get_time_usec_t = time_t ();
callback perf_get_counter_t = perf_tick_t ();
callback get_cpu_features_t = uint64_t ();
callback perf_log_t = void ();
callback perf_register_t = void (perf_counter counter);
callback perf_start_t = void (perf_counter counter);
callback perf_stop_t = void (perf_counter counter);
callback set_sensor_state_t = bool (unsigned long port, sensor_action action, unsigned long rate);
callback sensor_get_input_t = float (unsigned long port, unsigned long id);

callback camera_start_t = bool ();
callback camera_stop_t = void ();
callback camera_lifetime_status_t = void ();
callback camera_frame_raw_framebuffer_t = void (Uint32Array buffer, unsigned long width, unsigned long height, size_t pitch);

typedef int64_t usec_t;
callback camera_frame_opengl_texture_t = void (unsigned long texture_id, unsigned long texture_target, float affine);
callback location_set_interval_t = void (unsigned long interval_ms, unsigned long interval_distance);
callback location_start_t = bool ();
callback location_stop_t = void ();
callback location_get_position_t = bool (double lat, double lon, double horiz_accuracy, double vert_accuracy);
callback location_lifetime_status_t = void ();
callback set_rumble_state_t = bool (unsigned long port, rumble_effect effect, uint16_t strength);
callback audio_callback_t = void ();
callback audio_set_state_callback_t = void (bool enabled);
callback frame_time_callback_t = void (usec_t usec);
callback set_eject_state_t = bool (bool ejected);
callback get_eject_state_t = bool ();
callback get_image_index_t = unsigned long ();
callback set_image_index_t = bool (unsigned long index);
callback get_num_images_t = unsigned long ();
callback replace_image_index_t = bool (unsigned long index, game_info info);
callback add_image_index_t = bool ();

typedef unsigned long uintptr_t;
typedef unsigned long uint32_t;
callback hw_context_reset_t = void ();
callback hw_get_current_framebuffer_t = uintptr_t ();
callback hw_get_proc_address_t = proc_address_t (DOMString sym);
callback keyboard_event_t = void (bool down, unsigned long keycode, uint32_t character, uint16_t key_modifiers);

interface  {
  const long API_VERSION = 1;
  const long DEVICE_TYPE_SHIFT = 8;
  const long DEVICE_NONE = 0;
  const long DEVICE_JOYPAD = 1;
  const long DEVICE_MOUSE = 2;
  const long DEVICE_KEYBOARD = 3;
  const long DEVICE_LIGHTGUN = 4;
  const long DEVICE_ANALOG = 5;
  const long DEVICE_POINTER = 6;
  const long DEVICE_ID_JOYPAD_B = 0;
  const long DEVICE_ID_JOYPAD_Y = 1;
  const long DEVICE_ID_JOYPAD_SELECT = 2;
  const long DEVICE_ID_JOYPAD_START = 3;
  const long DEVICE_ID_JOYPAD_UP = 4;
  const long DEVICE_ID_JOYPAD_DOWN = 5;
  const long DEVICE_ID_JOYPAD_LEFT = 6;
  const long DEVICE_ID_JOYPAD_RIGHT = 7;
  const long DEVICE_ID_JOYPAD_A = 8;
  const long DEVICE_ID_JOYPAD_X = 9;
  const long DEVICE_ID_JOYPAD_L = 10;
  const long DEVICE_ID_JOYPAD_R = 11;
  const long DEVICE_ID_JOYPAD_L2 = 12;
  const long DEVICE_ID_JOYPAD_R2 = 13;
  const long DEVICE_ID_JOYPAD_L3 = 14;
  const long DEVICE_ID_JOYPAD_R3 = 15;
  const long DEVICE_INDEX_ANALOG_LEFT = 0;
  const long DEVICE_INDEX_ANALOG_RIGHT = 1;
  const long DEVICE_ID_ANALOG_X = 0;
  const long DEVICE_ID_ANALOG_Y = 1;
  const long DEVICE_ID_MOUSE_X = 0;
  const long DEVICE_ID_MOUSE_Y = 1;
  const long DEVICE_ID_MOUSE_LEFT = 2;
  const long DEVICE_ID_MOUSE_RIGHT = 3;
  const long DEVICE_ID_MOUSE_WHEELUP = 4;
  const long DEVICE_ID_MOUSE_WHEELDOWN = 5;
  const long DEVICE_ID_MOUSE_MIDDLE = 6;
  const long DEVICE_ID_MOUSE_HORIZ_WHEELUP = 7;
  const long DEVICE_ID_MOUSE_HORIZ_WHEELDOWN = 8;
  const long DEVICE_ID_LIGHTGUN_X = 0;
  const long DEVICE_ID_LIGHTGUN_Y = 1;
  const long DEVICE_ID_LIGHTGUN_TRIGGER = 2;
  const long DEVICE_ID_LIGHTGUN_CURSOR = 3;
  const long DEVICE_ID_LIGHTGUN_TURBO = 4;
  const long DEVICE_ID_LIGHTGUN_PAUSE = 5;
  const long DEVICE_ID_LIGHTGUN_START = 6;
  const long DEVICE_ID_POINTER_X = 0;
  const long DEVICE_ID_POINTER_Y = 1;
  const long DEVICE_ID_POINTER_PRESSED = 2;
  const long REGION_NTSC = 0;
  const long REGION_PAL = 1;
  const long MEMORY_SAVE_RAM = 0;
  const long MEMORY_RTC = 1;
  const long MEMORY_SYSTEM_RAM = 2;
  const long MEMORY_VIDEO_RAM = 3;
  const long ENVIRONMENT_SET_ROTATION = 1;
  const long ENVIRONMENT_GET_OVERSCAN = 2;
  const long ENVIRONMENT_GET_CAN_DUPE = 3;
  const long ENVIRONMENT_SET_MESSAGE = 6;
  const long ENVIRONMENT_SHUTDOWN = 7;
  const long ENVIRONMENT_SET_PERFORMANCE_LEVEL = 8;
  const long ENVIRONMENT_GET_SYSTEM_DIRECTORY = 9;
  const long ENVIRONMENT_SET_PIXEL_FORMAT = 10;
  const long ENVIRONMENT_SET_INPUT_DESCRIPTORS = 11;
  const long ENVIRONMENT_SET_KEYBOARD_CALLBACK = 12;
  const long ENVIRONMENT_SET_DISK_CONTROL_INTERFACE = 13;
  const long ENVIRONMENT_SET_HW_RENDER = 14;
  const long ENVIRONMENT_GET_VARIABLE = 15;
  const long ENVIRONMENT_SET_VARIABLES = 16;
  const long ENVIRONMENT_GET_VARIABLE_UPDATE = 17;
  const long ENVIRONMENT_SET_SUPPORT_NO_GAME = 18;
  const long ENVIRONMENT_GET_LIBPATH = 19;
  const long ENVIRONMENT_SET_AUDIO_CALLBACK = 22;
  const long ENVIRONMENT_SET_FRAME_TIME_CALLBACK = 21;
  const long ENVIRONMENT_GET_RUMBLE_INTERFACE = 23;
  const long ENVIRONMENT_GET_INPUT_DEVICE_CAPABILITIES = 24;
  const long ENVIRONMENT_GET_LOG_INTERFACE = 27;
  const long ENVIRONMENT_GET_PERF_INTERFACE = 28;
  const long ENVIRONMENT_GET_LOCATION_INTERFACE = 29;
  const long ENVIRONMENT_GET_CONTENT_DIRECTORY = 30;
  const long ENVIRONMENT_GET_CORE_ASSETS_DIRECTORY = 30;
  const long ENVIRONMENT_GET_SAVE_DIRECTORY = 31;
  const long ENVIRONMENT_SET_SYSTEM_AV_INFO = 32;
  const long ENVIRONMENT_SET_PROC_ADDRESS_CALLBACK = 33;
  const long ENVIRONMENT_SET_SUBSYSTEM_INFO = 34;
  const long ENVIRONMENT_SET_CONTROLLER_INFO = 35;
  const long ENVIRONMENT_SET_GEOMETRY = 37;
  const long ENVIRONMENT_GET_USERNAME = 38;
  const long ENVIRONMENT_GET_LANGUAGE = 39;
  const long MEMDESC_CONST = 1;
  const long MEMDESC_BIGENDIAN = 2;
  const long MEMDESC_ALIGN_2 = 65536;
  const long MEMDESC_ALIGN_4 = 131072;
  const long MEMDESC_ALIGN_8 = 196608;
  const long MEMDESC_MINSIZE_2 = 16777216;
  const long MEMDESC_MINSIZE_4 = 33554432;
  const long MEMDESC_MINSIZE_8 = 50331648;
  const long SIMD_SSE = 1;
  const long SIMD_SSE2 = 2;
  const long SIMD_VMX = 4;
  const long SIMD_VMX128 = 8;
  const long SIMD_AVX = 16;
  const long SIMD_NEON = 32;
  const long SIMD_SSE3 = 64;
  const long SIMD_SSSE3 = 128;
  const long SIMD_MMX = 256;
  const long SIMD_MMXEXT = 512;
  const long SIMD_SSE4 = 1024;
  const long SIMD_SSE42 = 2048;
  const long SIMD_AVX2 = 4096;
  const long SIMD_VFPU = 8192;
  const long SIMD_PS = 16384;
  const long SIMD_AES = 32768;
  const long SIMD_VFPV3 = 65536;
  const long SIMD_VFPV4 = 131072;
  const long SENSOR_ACCELEROMETER_X = 1;
  const long SENSOR_ACCELEROMETER_Y = 1;
  const long SENSOR_ACCELEROMETER_Z = 2;
}

interface memory_descriptor {
  attribute uint64_t flags;
  attribute unsigned long offset;
  attribute unsigned long start;
  attribute unsigned long select;
  attribute unsigned long disconnect;
  attribute unsigned long len;
  attribute DOMString addrspace;
};

interface memory_map {
  attribute memory_descriptor[] descriptors;
  attribute unsigned long num_descriptors;
};

interface controller_description {
  attribute DOMString desc;
  attribute unsigned long id;
};

interface controller_info {
  attribute controller_description[] types;
  attribute unsigned long num_types;
};

interface subsystem_memory_info {
  attribute DOMString extension;
  attribute unsigned long type;
};

interface subsystem_rom_info {
  attribute DOMString desc;
  attribute DOMString valid_extensions;
  attribute bool need_fullpath;
  attribute bool block_extract;
  attribute bool required;
  attribute DOMString memory;
  attribute unsigned long num_memory;
};

interface subsystem_info {
  attribute DOMString desc;
  attribute DOMString ident;
  attribute DOMString[] roms;
  attribute unsigned long num_roms;
  attribute unsigned long id;
};

interface get_proc_address_interface {
  attribute get_proc_address_t get_proc_address;
};

interface log_callback {
  attribute log_printf_t log;
};

interface perf_counter {
  attribute DOMString ident;
  attribute perf_tick_t start;
  attribute perf_tick_t total;
  attribute perf_tick_t call_cnt;
  attribute bool registered;
};

interface perf_callback {
  attribute perf_get_time_usec_t get_time_usec;
  attribute get_cpu_features_t get_cpu_features;
  attribute perf_get_counter_t get_perf_counter;
  attribute perf_register_t perf_register;
  attribute perf_start_t perf_start;
  attribute perf_stop_t perf_stop;
  attribute perf_log_t perf_log;
};

interface sensor_interface {
  attribute set_sensor_state_t set_sensor_state;
  attribute sensor_get_input_t get_sensor_input;
};

interface camera_callback {
  attribute uint64_t caps;
  attribute unsigned long width;
  attribute unsigned long height;
  attribute camera_start_t start;
  attribute camera_stop_t stop;
  attribute camera_frame_raw_framebuffer_t frame_raw_framebuffer;
  attribute camera_frame_opengl_texture_t frame_opengl_texture;
  attribute camera_lifetime_status_t initialized;
  attribute camera_lifetime_status_t deinitialized;
};

interface location_callback {
  attribute location_start_t start;
  attribute location_stop_t stop;
  attribute location_get_position_t get_position;
  attribute location_set_interval_t set_interval;
  attribute location_lifetime_status_t initialized;
  attribute location_lifetime_status_t deinitialized;
};

interface rumble_interface {
  attribute set_rumble_state_t set_rumble_state;
};

interface audio_callback {
  attribute audio_callback_t cb;
  attribute audio_set_state_callback_t set_state;
};

interface frame_time_callback {
  attribute frame_time_callback_t cb;
  attribute usec_t reference;
};

interface hw_render_callback {
  attribute hw_context_type context_type;
  attribute hw_context_reset_t context_reset;
  attribute hw_get_current_framebuffer_t get_current_framebuffer;
  attribute hw_get_proc_address_t get_proc_address;
  attribute bool depth;
  attribute bool stencil;
  attribute bool bottom_left_origin;
  attribute unsigned long version_major;
  attribute unsigned long version_minor;
  attribute bool cache_context;
  attribute hw_context_reset_t context_destroy;
  attribute bool debug_context;
};

interface keyboard_callback {
  attribute keyboard_event_t cb;
};

interface game_info {
  attribute DOMString path;
  attribute Uint8Array data;
  attribute unsigned long size;
  attribute DOMString meta;
};

interface disk_control_callback {
  attribute set_eject_state_t set_eject_state;
  attribute get_eject_state_t get_eject_state;
  attribute get_image_index_t get_image_index;
  attribute set_image_index_t set_image_index;
  attribute get_num_images_t get_num_images;
  attribute replace_image_index_t replace_image_index;
  attribute add_image_index_t add_image_index;
};

interface message {
  attribute DOMString msg;
  attribute unsigned long frames;
};

interface input_descriptor {
  attribute unsigned long port;
  attribute unsigned long device;
  attribute unsigned long index;
  attribute unsigned long id;
  attribute DOMString description;
};

interface system_info {
  attribute DOMString library_name;
  attribute DOMString library_version;
  attribute DOMString valid_extensions;
  attribute bool need_fullpath;
  attribute bool block_extract;
};

interface game_geometry {
  attribute unsigned long base_width;
  attribute unsigned long base_height;
  attribute unsigned long max_width;
  attribute unsigned long max_height;
  attribute float aspect_ratio;
};

interface system_timing {
  attribute double fps;
  attribute double sample_rate;
};

interface system_av_info {
  attribute unsigned long geometry;
  attribute unsigned long timing;
};

interface variable {
  attribute DOMString key;
  attribute DOMString value;
};
